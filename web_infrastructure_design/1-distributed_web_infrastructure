img

https://imgur.com/F4ucZ3D

Diagram:

```
                    +-----------+
                    |   User    |
                    +-----+-----+
                          |
                          |
                          |
                          v
                  +-------+-------+
                  |   Load Balancer  |
                  |   (HAProxy)     |
                  +-------+-------+
                          |
                          |
             +------------+-------------+
             |                          |
             v                          v
   +---------+---------+      +---------+---------+
   |   Server 1        |      |   Server 2        |
   |   (Application)   |      |   (Application)   |
   |                   |      |                   |
   |   +-----------+   |      |   +-----------+   |
   |   |   Nginx   |   |      |   |   Nginx   |   |
   |   +-----------+   |      |   +-----------+   |
   +---------+---------+      +---------+---------+
             |                          |
             |                          |
             v                          v
      +------+------+            +------+------+       
      | Database     |            | Database     |
      | (MySQL)      |            | (MySQL)      |
      |              |            |              |
      +--------------+            +--------------+
```



1. User: Represents the user or client who accesses the web application.

2. Load Balancer (HAProxy): Acts as the entry point for incoming user requests. It distributes the incoming traffic across the two application servers based on a distribution algorithm, which can be round-robin, least connection, etc. The load balancer helps distribute the workload evenly, improves scalability, and enhances fault tolerance.

3. Server 1 and Server 2 (Application Servers): These servers host the application codebase and run the application software. They are responsible for processing user requests, generating responses, and interacting with the database.

4. Nginx: The Nginx web server software runs on each application server. It acts as a reverse proxy and handles tasks such as serving static files, SSL termination, and load balancing between backend application processes.

5. Database (MySQL): The database server stores and manages the application's data. It uses the MySQL database management system. The database is accessed by the application servers to perform read and write operations.

Specifics of the infrastructure:

- Addition of Load Balancer: The load balancer is added to distribute incoming traffic evenly across the application servers, improving performance and availability.

- Use of Nginx: Nginx is employed as a reverse proxy to offload some tasks from the application servers, such as handling static content and load balancing, resulting in improved performance and scalability.

- Primary-Replica (Master-Slave) Database Cluster: The database is set up as a primary-replica cluster, also known as a master-slave configuration. The primary node handles both read and write operations, while the replica node(s) replicate data from the primary and serve as hot-standby for failover and improved read scalability.

Issues with the infrastructure:

1. Single Point of Failure (SPOF): The infrastructure lacks redundancy for critical components. If any of the servers or the load balancer fails, it would cause a service disruption.

2. Security Issues: The infrastructure lacks essential security measures. There is no firewall implemented, which could expose the servers to unauthorized access. Additionally, the absence of HTTPS leaves the communication between users and the application vulnerable to interception and data tampering.

3. Lack of Monitoring: The infrastructure does not include any monitoring system to track the performance, availability, and health of the servers and services. This absence hinders proactive issue detection and troubleshooting.